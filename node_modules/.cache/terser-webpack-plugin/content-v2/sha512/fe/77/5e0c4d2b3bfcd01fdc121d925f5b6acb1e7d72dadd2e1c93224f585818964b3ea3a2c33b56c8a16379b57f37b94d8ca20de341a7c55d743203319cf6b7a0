{"map":"{\"version\":3,\"sources\":[\"/Users/misskiss/Documents/Fullstack-Academy/projects/image-stackathon/src/Buttons.js\",\"/Users/misskiss/Documents/Fullstack-Academy/projects/image-stackathon/src/App.js\",\"/Users/misskiss/Documents/Fullstack-Academy/projects/image-stackathon/src/serviceWorker.js\",\"/Users/misskiss/Documents/Fullstack-Academy/projects/image-stackathon/src/index.js\"],\"names\":[\"Buttons\",\"_Component\",\"Object\",\"classCallCheck\",\"this\",\"possibleConstructorReturn\",\"getPrototypeOf\",\"apply\",\"arguments\",\"inherits\",\"createClass\",\"key\",\"value\",\"react_default\",\"a\",\"createElement\",\"Component\",\"App\",\"className\",\"src_Buttons\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"src_App\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"then\",\"registration\",\"unregister\"],\"mappings\":\"+NA0PeA,EAlPf,SAAAC,GAAA,SAAAD,IAAA,OAAAE,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAF,EAAAC,GAAAC,OAAAQ,EAAA,EAAAR,CAAAF,EAAA,CAAA,CAAAW,IAAA,SAAAC,MAAA,WAEQ,OACIC,EAAAC,EAAAC,cAAA,MAAA,UAHZf,EAAA,CAA6BgB,EAAAA,WCYdC,IAAAA,EAff,WACE,OACEJ,EAAAC,EAAAC,cAAA,MAAA,CAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAA,SAAA,CAAQG,UAAU,cAEhBL,EAAAC,EAAAC,cAAA,KAAA,KAAA,eACAF,EAAAC,EAAAC,cAAA,IAAA,KAAA,YAGAF,EAAAC,EAAAC,cAACI,EAAD,SCFYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,EAAAA,EAASC,OAAOb,EAAAC,EAAAC,cAACY,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC\",\"sourcesContent\":[\"import React, { Component } from 'react';\\n// const Caman = require('caman').Caman;\\n\\n\\n\\n\\n\\n\\nexport class Buttons extends Component {\\n    render() {\\n        return (\\n            <div></div>\\n        )\\n    }\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n// export class Buttons extends Component {\\n//   render() {\\n//     const canvas = document.getElementById('canvas');\\n//     const ctx = canvas.getContext('2d');\\n//     const fileName = '';\\n//     const img = new Image();\\n\\n//     document.ready(function() {\\n//       '#brightness-inc'.on('click', function(e) {\\n//         Caman('#canvas', img, function() {\\n//           this.brightness(10).render();\\n//         });\\n//       });\\n\\n//       '#brightness-dec'.on('click', function(e) {\\n//         Caman('#canvas', img, function() {\\n//           this.brightness(-10).render();\\n//         });\\n//       });\\n\\n//       '#contrast-inc'.on('click', function(e) {\\n//         Caman('#canvas', img, function() {\\n//           this.contrast(10).render();\\n//         });\\n//       });\\n\\n//       '#contrast-dec'.on('click', function(e) {\\n//         Caman('#canvas', img, function() {\\n//           this.contrast(-10).render();\\n//         });\\n//       });\\n\\n//       '#saturation-inc'.on('click', function(e) {\\n//         Caman('#canvas', img, function() {\\n//           this.saturation(10).render();\\n//         });\\n//       });\\n\\n//       '#saturation-dec'.on('click', function(e) {\\n//         Caman('#canvas', img, function() {\\n//           this.saturation(-10).render();\\n//         });\\n//       });\\n\\n//       '#vibrance-inc'.on('click', function(e) {\\n//         Caman('#canvas', img, function() {\\n//           this.vibrance(10).render();\\n//         });\\n//       });\\n\\n//       '#vibrance-dec'.on('click', function(e) {\\n//         Caman('#canvas', img, function() {\\n//           this.vibrance(-10).render();\\n//         });\\n//       });\\n\\n//       '#exposure-inc'.on('click', function(e) {\\n//         Caman('#canvas', img, function() {\\n//           this.exposure(10).render();\\n//         });\\n//       });\\n\\n//       '#exposure-dec'.on('click', function(e) {\\n//         Caman('#canvas', img, function() {\\n//           this.exposure(-10).render();\\n//         });\\n//       });\\n\\n//       '#noise-inc'.on('click', function(e) {\\n//         Caman('#canvas', img, function() {\\n//           this.noise(10).render();\\n//         });\\n//       });\\n\\n//       '#sharpen-inc'.on('click', function(e) {\\n//         Caman('#canvas', img, function() {\\n//           this.sharpen(10).render();\\n//         });\\n//       });\\n\\n//       '#sepia-inc'.on('click', function(e) {\\n//         Caman('#canvas', img, function() {\\n//           this.sepia(20).render();\\n//         });\\n//       });\\n\\n//       '#hue-inc'.on('click', function(e) {\\n//         Caman('#canvas', img, function() {\\n//           this.hue(10).render();\\n//         });\\n//       });\\n\\n//       '#blur-inc'.on('click', function(e) {\\n//         Caman('#canvas', img, function() {\\n//           this.stackBlur(5).render();\\n//         });\\n//       });\\n\\n//       '#gamma-inc'.on('click', function(e) {\\n//         Caman('#canvas', img, function() {\\n//           this.gamma(0.1).render();\\n//         });\\n//       });\\n\\n//       '#clip-inc'.on('click', function(e) {\\n//         Caman('#canvas', img, function() {\\n//           this.clip(10).render();\\n//         });\\n//       });\\n\\n//       '#vintage-btn'.on('click', function(e) {\\n//         Caman('#canvas', img, function() {\\n//           this.vintage().render();\\n//         });\\n//       });\\n\\n//       '#lomo-btn'.on('click', function(e) {\\n//         Caman('#canvas', img, function() {\\n//           this.lomo().render();\\n//         });\\n//       });\\n\\n//       '#calrity-btn'.on('click', function(e) {\\n//         Caman('#canvas', img, function() {\\n//           this.clarity().render();\\n//         });\\n//       });\\n\\n//       '#sincity-btn'.on('click', function(e) {\\n//         Caman('#canvas', img, function() {\\n//           this.sinCity().render();\\n//         });\\n//       });\\n\\n//       '#crossprocess-btn'.on('click', function(e) {\\n//         Caman('#canvas', img, function() {\\n//           this.crossProcess().render();\\n//         });\\n//       });\\n\\n//       '#pinhole-btn'.on('click', function(e) {\\n//         Caman('#canvas', img, function() {\\n//           this.pinhole().render();\\n//         });\\n//       });\\n\\n//       '#nostalgia-btn'.on('click', function(e) {\\n//         Caman('#canvas', img, function() {\\n//           this.nostalgia().render();\\n//         });\\n//       });\\n\\n//       '#majestic-btn'.on('click', function(e) {\\n//         Caman('#canvas', img, function() {\\n//           this.herMajesty().render();\\n//         });\\n//       });\\n\\n//       '#download-btn'.on('click', function(e) {\\n//         const fileExtension = fileName.slice(-4);\\n//         if (fileExtension === '.jpg' || fileExtension === '.png') {\\n//             const actualName = fileName.substring(0, fileName.length - 4);\\n//         }\\n//         download(canvas, actualName + '-edited.jpg');\\n//       });\\n\\n//       '#upload-file'.on('change', function() {\\n//         const file = document.querySelector('#upload-file').files[0];\\n//         const reader = new FileReader();\\n\\n//         if (file) {\\n//           fileName = file.name;\\n//           reader.readAsDataURL(file);\\n//         }\\n\\n//         reader.addEventListener(\\n//           'load',\\n//           function() {\\n//             img = new Image();\\n//             img.src = reader.result;\\n//             img.onload = function() {\\n//               canvas.width = img.width;\\n//               canvas.height = img.height;\\n//               ctx.drawImage(img, 0, 0, img.width, img.height);\\n//               '#canvas'.removeAttr('data-caman-id');\\n//             };\\n//           },\\n//           false\\n//         );\\n//       });\\n//     });\\n\\n//     function download(canvas, filename) {\\n//       let e;\\n//       const lnk = document.createElement('a');\\n\\n//       lnk.download = filename;\\n\\n//       lnk.href = canvas.toDataURL('image/jpeg', 0.8);\\n\\n//       if (document.createEvent) {\\n//         e = document.createEvent('MouseEvents');\\n//         e.initMouseEvent(\\n//           'click',\\n//           true,\\n//           true,\\n//           window,\\n//           0,\\n//           0,\\n//           0,\\n//           0,\\n//           0,\\n//           false,\\n//           false,\\n//           false,\\n//           false,\\n//           0,\\n//           null\\n//         );\\n//         lnk.dispatchEvent(e);\\n//       } else if (lnk.fireEvent) {\\n//         lnk.fireEvent('onclick');\\n//       }\\n//     }\\n//     return <div />;\\n//   }\\n// }\\nexport default Buttons;\\n\",\"import React from 'react';\\n// import logo from './logo.svg';\\nimport './App.css';\\nimport Buttons from './Buttons'\\n\\nfunction App() {\\n  return (\\n    <div className=\\\"App\\\">\\n      <header className=\\\"App-header\\\">\\n        {/* <img src={logo} className=\\\"App-logo\\\" alt=\\\"logo\\\" /> */}\\n        <h1>Get started</h1>\\n        <p>\\n          Oh hello\\n        </p>\\n        <Buttons />\\n      </header>\\n    </div>\\n  );\\n}\\n\\nexport default App;\\n\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read https://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport './index.css';\\nimport App from './App';\\nimport * as serviceWorker from './serviceWorker';\\n\\nReactDOM.render(<App />, document.getElementById('root'));\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: https://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{14:function(e,n,t){},15:function(e,n,t){},16:function(e,n,t){\"use strict\";t.r(n);var a=t(0),o=t.n(a),r=t(2),c=t.n(r),l=(t(14),t(15),t(3)),i=t(4),u=t(6),s=t(5),m=t(7),d=function(e){function n(){return Object(l.a)(this,n),Object(u.a)(this,Object(s.a)(n).apply(this,arguments))}return Object(m.a)(n,e),Object(i.a)(n,[{key:\"render\",value:function(){return o.a.createElement(\"div\",null)}}]),n}(a.Component);var h=function(){return o.a.createElement(\"div\",{className:\"App\"},o.a.createElement(\"header\",{className:\"App-header\"},o.a.createElement(\"h1\",null,\"Get started\"),o.a.createElement(\"p\",null,\"Oh hello\"),o.a.createElement(d,null)))};Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));c.a.render(o.a.createElement(h,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})},8:function(e,n,t){e.exports=t(16)}},[[8,1,2]]]);","extractedComments":[]}